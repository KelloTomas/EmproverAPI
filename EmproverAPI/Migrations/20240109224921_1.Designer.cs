// <auto-generated />
using System;
using EmproverAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmproverAPI.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20240109224921_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmproverAPI.Models.DB.AllowedValues", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("FunctionParameterFunctionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FunctionParameterIndex")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Key");

                    b.HasIndex("FunctionParameterFunctionName", "FunctionParameterIndex");

                    b.ToTable("AllowedValues");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.DayStatistics", b =>
                {
                    b.Property<string>("SymbolCode")
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("Date");

                    b.Property<decimal>("BuySellVolume")
                        .HasColumnType("decimal(13, 3)");

                    b.Property<string>("Obj1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obj2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obj3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obj4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obj5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymbolCode", "DateTime");

                    b.ToTable("DayStatistics");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Function", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.FunctionParameter", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<decimal?>("DefaultValue")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ParameterType")
                        .HasColumnType("int");

                    b.HasKey("FunctionName", "Index");

                    b.ToTable("FunctionParameters");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.FunctionParameterValue", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.Property<int>("FunctionParameterIndex")
                        .HasColumnType("int");

                    b.Property<string>("FunctionParameterFunctionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("WorkspaceId", "FunctionParameterIndex", "FunctionParameterFunctionName");

                    b.HasIndex("FunctionParameterFunctionName", "FunctionParameterIndex");

                    b.ToTable("FunctionParameterValues");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Indicator", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DisplayType")
                        .HasColumnType("int");

                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Code");

                    b.HasIndex("FunctionName");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Point", b =>
                {
                    b.Property<string>("DayStatisticsSymbolCode")
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DayStatisticsDateTime")
                        .HasColumnType("Date");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("CloseValue")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("OpenValue")
                        .HasColumnType("int");

                    b.HasKey("DayStatisticsSymbolCode", "DayStatisticsDateTime", "Time");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Symbol", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("Date");

                    b.HasKey("Code");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.User", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Name = "Sample",
                            Description = "Sample user",
                            Password = "password",
                            Permissions = 3
                        },
                        new
                        {
                            Name = "Another",
                            Description = "Another user",
                            Password = "securePwd",
                            Permissions = 1
                        });
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IndicatorCode")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SymbolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorCode");

                    b.HasIndex("SymbolCode");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.AllowedValues", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.FunctionParameter", null)
                        .WithMany("AllowedValues")
                        .HasForeignKey("FunctionParameterFunctionName", "FunctionParameterIndex");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.DayStatistics", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.Symbol", "Symbol")
                        .WithMany("DayStatistics")
                        .HasForeignKey("SymbolCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.FunctionParameter", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.Function", "Function")
                        .WithMany("Parameters")
                        .HasForeignKey("FunctionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.FunctionParameterValue", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.Workspace", "Workspace")
                        .WithMany("FunctionParameterValues")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmproverAPI.Models.DB.FunctionParameter", "ParameterDefinition")
                        .WithMany()
                        .HasForeignKey("FunctionParameterFunctionName", "FunctionParameterIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterDefinition");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Indicator", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionName");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Point", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.DayStatistics", "DayStatistics")
                        .WithMany("Point")
                        .HasForeignKey("DayStatisticsSymbolCode", "DayStatisticsDateTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayStatistics");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Workspace", b =>
                {
                    b.HasOne("EmproverAPI.Models.DB.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorCode");

                    b.HasOne("EmproverAPI.Models.DB.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.DayStatistics", b =>
                {
                    b.Navigation("Point");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Function", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.FunctionParameter", b =>
                {
                    b.Navigation("AllowedValues");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Symbol", b =>
                {
                    b.Navigation("DayStatistics");
                });

            modelBuilder.Entity("EmproverAPI.Models.DB.Workspace", b =>
                {
                    b.Navigation("FunctionParameterValues");
                });
#pragma warning restore 612, 618
        }
    }
}
